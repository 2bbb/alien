#include "simulationparameters.h"


void SimulationParameters::setParameters(SimulationParameters * other)
{
	CRIT_CELL_DIST_MIN = other->CRIT_CELL_DIST_MIN;
	CRIT_CELL_DIST_MAX = other->CRIT_CELL_DIST_MAX;
	INTERNAL_TO_KINETIC_ENERGY = other->INTERNAL_TO_KINETIC_ENERGY;
	CELL_MAX_FORCE = other->CELL_MAX_FORCE;
	CELL_MAX_FORCE_DECAY_PROB = other->CELL_MAX_FORCE_DECAY_PROB;
	MAX_CELL_CONNECTIONS = other->MAX_CELL_CONNECTIONS;
	CELL_TOKENSTACKSIZE = other->CELL_TOKENSTACKSIZE;
	MAX_TOKEN_ACCESS_NUMBERS = other->MAX_TOKEN_ACCESS_NUMBERS;
	NEW_CELL_ENERGY = other->NEW_CELL_ENERGY;
	NEW_CELL_MAX_CONNECTION = other->NEW_CELL_MAX_CONNECTION;
	NEW_CELL_TOKEN_ACCESS_NUMBER = other->NEW_CELL_TOKEN_ACCESS_NUMBER;
	CRIT_CELL_TRANSFORM_ENERGY = other->CRIT_CELL_TRANSFORM_ENERGY;
	CELL_TRANSFORM_PROB = other->CELL_TRANSFORM_PROB;
	CLUSTER_FUSION_VEL = other->CLUSTER_FUSION_VEL;

	CELL_WEAPON_STRENGTH = other->CELL_WEAPON_STRENGTH;
	CELL_NUM_INSTR = other->CELL_NUM_INSTR;
	CELL_MEMSIZE = other->CELL_MEMSIZE;
	TOKEN_MEMSIZE = other->TOKEN_MEMSIZE;
	CELL_FUNCTION_CONSTRUCTOR_OFFSPRING_DIST = other->CELL_FUNCTION_CONSTRUCTOR_OFFSPRING_DIST;
	CELL_FUNCTION_SENSOR_RANGE = other->CELL_FUNCTION_SENSOR_RANGE;
	CELL_FUNCTION_COMMUNICATOR_RANGE = other->CELL_FUNCTION_COMMUNICATOR_RANGE;

	NEW_TOKEN_ENERGY = other->NEW_TOKEN_ENERGY;
	MIN_TOKEN_ENERGY = other->MIN_TOKEN_ENERGY;

	RAD_EXPONENT = other->RAD_EXPONENT;
	RAD_FACTOR = other->RAD_FACTOR;
	RAD_PROBABILITY = other->RAD_PROBABILITY;

	CELL_RAD_ENERGY_VEL_MULT = other->CELL_RAD_ENERGY_VEL_MULT;
	CELL_RAD_ENERGY_VEL_PERTURB = other->CELL_RAD_ENERGY_VEL_PERTURB;
}

void SimulationParameters::serializePrimitives(QDataStream & stream)
{
	stream << CRIT_CELL_DIST_MIN;
	stream << CRIT_CELL_DIST_MAX;
	stream << INTERNAL_TO_KINETIC_ENERGY;
	stream << CELL_MAX_FORCE;
	stream << CELL_MAX_FORCE_DECAY_PROB;
	stream << MAX_CELL_CONNECTIONS;
	stream << CELL_TOKENSTACKSIZE;
	stream << MAX_TOKEN_ACCESS_NUMBERS;
	stream << NEW_CELL_ENERGY;
	stream << NEW_CELL_MAX_CONNECTION;
	stream << NEW_CELL_TOKEN_ACCESS_NUMBER;
	stream << CRIT_CELL_TRANSFORM_ENERGY;
	stream << CELL_TRANSFORM_PROB;
	stream << CLUSTER_FUSION_VEL;
	stream << CELL_WEAPON_STRENGTH;
	stream << CELL_NUM_INSTR;
	stream << CELL_MEMSIZE;
	stream << TOKEN_MEMSIZE;
	stream << CELL_FUNCTION_CONSTRUCTOR_OFFSPRING_DIST;
	stream << CELL_FUNCTION_SENSOR_RANGE;
	stream << CELL_FUNCTION_COMMUNICATOR_RANGE;
	stream << NEW_TOKEN_ENERGY;
	stream << MIN_TOKEN_ENERGY;
	stream << RAD_EXPONENT;
	stream << RAD_FACTOR;
	stream << RAD_PROBABILITY;
	stream << CELL_RAD_ENERGY_VEL_MULT;
	stream << CELL_RAD_ENERGY_VEL_PERTURB;
}

void SimulationParameters::deserializePrimitives(QDataStream & stream)
{
	stream >> CRIT_CELL_DIST_MIN;
	stream >> CRIT_CELL_DIST_MAX;
	stream >> INTERNAL_TO_KINETIC_ENERGY;
	stream >> CELL_MAX_FORCE;
	stream >> CELL_MAX_FORCE_DECAY_PROB;
	stream >> MAX_CELL_CONNECTIONS;
	stream >> CELL_TOKENSTACKSIZE;
	stream >> MAX_TOKEN_ACCESS_NUMBERS;
	stream >> NEW_CELL_ENERGY;
	stream >> NEW_CELL_MAX_CONNECTION;
	stream >> NEW_CELL_TOKEN_ACCESS_NUMBER;
	stream >> CRIT_CELL_TRANSFORM_ENERGY;
	stream >> CELL_TRANSFORM_PROB;
	stream >> CLUSTER_FUSION_VEL;
	stream >> CELL_WEAPON_STRENGTH;
	stream >> CELL_NUM_INSTR;
	stream >> CELL_MEMSIZE;
	stream >> TOKEN_MEMSIZE;
	stream >> CELL_FUNCTION_CONSTRUCTOR_OFFSPRING_DIST;
	stream >> CELL_FUNCTION_SENSOR_RANGE;
	stream >> CELL_FUNCTION_COMMUNICATOR_RANGE;
	stream >> NEW_TOKEN_ENERGY;
	stream >> MIN_TOKEN_ENERGY;
	stream >> RAD_EXPONENT;
	stream >> RAD_FACTOR;
	stream >> RAD_PROBABILITY;
	stream >> CELL_RAD_ENERGY_VEL_MULT;
	stream >> CELL_RAD_ENERGY_VEL_PERTURB;
}
